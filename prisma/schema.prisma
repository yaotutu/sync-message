// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./users.db"
}

model Admin {
  id        String            @id @default(cuid())
  username  String            @unique
  password  String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  templates MessageTemplate[]

  @@map("admins")
}

model User {
  id             String          @id @default(cuid())
  username       String          @unique
  password       String
  webhookKey     String          @unique @default(uuid())
  simpleCardKeys SimpleCardKey[]
  linkedCardKeys LinkedCardKey[]
  products       Product[]
  config         UserConfig?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  messages       Message[]

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  title       String // 商品标题
  link        String // 商品链接
  imageUrl    String? // 商品图片
  price       Float? // 商品价格
  description String? // 商品描述
  notes       String? // 备注信息
  userId      String // 关联用户ID
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@map("products")
}

model UserConfig {
  id                   String    @id @default(cuid())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  userId               String    @unique
  title                String?
  theme                String?
  language             String?
  cardKeyExpireMinutes Int?
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  appHelps             AppHelp[]

  @@map("user_configs")
}

model AppHelp {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  appName   String
  helpText  String
  configId  String
  config    UserConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@unique([configId, appName])
}

model SimpleCardKey {
  id        String    @id @default(cuid())
  key       String    @unique
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  used      Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
  @@map("simple_card_keys")
}

model LinkedCardKey {
  id        String    @id @default(cuid())
  key       String    @unique
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone     String? // 手机号
  appName   String? // 应用名称
  used      Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
  @@map("linked_card_keys")
}

model Message {
  id         String   @id @default(cuid())
  content    String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  receivedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("messages")
}

// 消息模板
model MessageTemplate {
  id        String        @id @default(cuid())
  appName   String        @unique
  helpDoc   String // 帮助文档
  rules     MessageRule[] // 关联的规则
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  createdBy String // 创建者ID（管理员）
  admin     Admin         @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("message_templates")
}

// 消息规则
model MessageRule {
  id          String          @id @default(cuid())
  templateId  String // 关联的模板ID
  template    MessageTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  ruleType    String // 规则类型：CONTAINS, NOT_CONTAINS
  pattern     String // 匹配模式
  description String? // 规则描述
  order       Int // 规则顺序
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([templateId])
  @@map("message_rules")
}
